{"version":3,"sources":["main.js"],"names":["generateRandomData","iterations","randomData","push","treeGeneration","creaturePool","adjPool","output","i","Math","random","floor","length","countElements","arr","count","Array","isArray","sortedData","data","sort","a","b","drawTree","number","totalElementsCount","drawTreeHTML","document","getElementById","console","log","treeNode","createElement","innerHTML","greekLetters","measureMaxLabelWidth","generation","folderCount","maxWidth","tempContainer","body","appendChild","tempNode","content","cloneNode","tempLabel","querySelector","textContent","concat","labelWidth","offsetWidth","removeChild","outputDiv","inputNumber","_loop","node","label","folder","subtreeContainer","classList","add","color","pickColor","style","text","backgroundColor","background","border","addEventListener","contains","remove","fontWeight","marginLeft","openText","openBackground","openBorder","indexOf","array","seedNumber"],"mappings":"AAAA,YAAY;;AAEZ;AACA,SAASA,kBAAkBA,CAACC,UAAU,EAAE;EACtC,IAAIC,UAAU,GAAG,EAAE;EACnBA,UAAU,CAACC,IAAI,CAACC,cAAc,CAACH,UAAU,CAAC,CAAC;EAC3C,OAAOC,UAAU;AACnB;AACA;AACA,SAASE,cAAcA,CAACH,UAAU,EAAE;EAClC,IAAMI,YAAY,GAAG,CACnB,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,GAAG,EACH,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,EACN,OAAO,EACP,KAAK,EACL,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,KAAK,EACL,IAAI,EACJ,KAAK,CACN;EACD,IAAMC,OAAO,GAAG,CACd,MAAM,EACN,MAAM,EACN,MAAM,EACN,KAAK,EACL,KAAK,EACL,KAAK,EACL,MAAM,EACN,IAAI,EACJ,MAAM,EACN,KAAK,EACL,MAAM,EACN,KAAK,EACL,MAAM,EACN,KAAK,EACL,KAAK,EACL,IAAI,EACJ,KAAK,EACL,KAAK,EACL,MAAM,EACN,KAAK,CACN;EACD,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,EAAEO,CAAC,EAAE,EAAE;IACnC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;MACvB,IAAIF,CAAC,GAAG,CAAC,EAAE;QACTD,MAAM,CAACJ,IAAI,CAACC,cAAc,CAACK,IAAI,CAACE,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChD;IACF,CAAC,MAAM;MACL,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QACvBH,MAAM,CAACJ,IAAI,CACTG,OAAO,CAACG,IAAI,CAACE,KAAK,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGJ,OAAO,CAACM,MAAM,CAAC,CAAC,GACjDP,YAAY,CAACI,IAAI,CAACE,KAAK,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGL,YAAY,CAACO,MAAM,CAAC,CAChE,CAAC;MACH,CAAC,MAAM;QACLL,MAAM,CAACJ,IAAI,CAACM,IAAI,CAACE,KAAK,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;MAC9C;IACF;EACF;EACA,OAAOH,MAAM;AACf;AACA;AACA,SAASM,aAAaA,CAACC,GAAG,EAAE;EAC1B,IAAIC,KAAK,GAAG,CAAC;EACb,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,GAAG,CAACF,MAAM,EAAEJ,CAAC,EAAE,EAAE;IACnC,IAAIQ,KAAK,CAACC,OAAO,CAACH,GAAG,CAACN,CAAC,CAAC,CAAC,EAAE;MACzBO,KAAK,IAAIF,aAAa,CAACC,GAAG,CAACN,CAAC,CAAC,CAAC;IAChC,CAAC,MAAM;MACLO,KAAK,EAAE;IACT;EACF;EACA,OAAOA,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,UAAUA,CAACC,IAAI,EAAE;EACxBA,IAAI,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;IAClB,IAAIN,KAAK,CAACC,OAAO,CAACI,CAAC,CAAC,IAAI,CAACL,KAAK,CAACC,OAAO,CAACK,CAAC,CAAC,EAAE;MACzC,OAAO,CAAC,CAAC;IACX,CAAC,MAAM,IAAI,CAACN,KAAK,CAACC,OAAO,CAACI,CAAC,CAAC,IAAIL,KAAK,CAACC,OAAO,CAACK,CAAC,CAAC,EAAE;MAChD,OAAO,CAAC;IACV,CAAC,MAAM,IAAIN,KAAK,CAACC,OAAO,CAACI,CAAC,CAAC,IAAIL,KAAK,CAACC,OAAO,CAACK,CAAC,CAAC,EAAE;MAC/C,OAAOT,aAAa,CAACS,CAAC,CAAC,GAAGT,aAAa,CAACQ,CAAC,CAAC;IAC5C,CAAC,MAAM,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;MACzD,OAAO,CAAC,CAAC;IACX,CAAC,MAAM,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;MACzD,OAAO,CAAC;IACV,CAAC,MAAM,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;MACzD,OAAOD,CAAC,CAACT,MAAM,GAAGU,CAAC,CAACV,MAAM;IAC5B,CAAC,MAAM,IAAI,OAAOS,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;MACzD,OAAO,CAAC,CAAC;IACX,CAAC,MAAM,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;MACzD,OAAO,CAAC;IACV,CAAC,MAAM,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,EAAE;MACzD,OAAOA,CAAC,GAAGD,CAAC;IACd,CAAC,MAAM;MACL,OAAO,CAAC;IACV;EACF,CAAC,CAAC;EACF,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,IAAI,CAACP,MAAM,EAAEJ,CAAC,EAAE,EAAE;IACpC,IAAIQ,KAAK,CAACC,OAAO,CAACE,IAAI,CAACX,CAAC,CAAC,CAAC,EAAE;MAC1BW,IAAI,CAACX,CAAC,CAAC,GAAGU,UAAU,CAACC,IAAI,CAACX,CAAC,CAAC,CAAC;IAC/B;EACF;EACA,OAAOW,IAAI;AACb;;AAEA;AACA,SAASI,QAAQA,CAACC,MAAM,EAAE;EACxB,IAAIL,IAAI,GAAGnB,kBAAkB,CAACwB,MAAM,CAAC;EACrCL,IAAI,GAAGD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC;EACzB,IAAIM,kBAAkB,GAAGZ,aAAa,CAACM,IAAI,CAAC;EAC5CO,YAAY,CACVP,IAAI,EACJQ,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,EACjC,GAAG,EACH,CAAC,EACDH,kBACF,CAAC;EACDI,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;AACnB;;AAEA;AACA,IAAMY,QAAQ,GAAGJ,QAAQ,CAACK,aAAa,CAAC,UAAU,CAAC;AACnDD,QAAQ,CAACE,SAAS,uPAMjB;;AAED;AACA,IAAMC,YAAY,GAAG,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;;AAED;AACA,SAASC,oBAAoBA,CAAChB,IAAI,EAAEiB,UAAU,EAAEC,WAAW,EAAE;EAC3D,IAAIC,QAAQ,GAAG,CAAC;;EAEhB;EACA,IAAIC,aAAa,GAAGZ,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC;EACjDL,QAAQ,CAACa,IAAI,CAACC,WAAW,CAACF,aAAa,CAAC;;EAExC;EACA,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,IAAI,CAACP,MAAM,EAAEJ,CAAC,EAAE,EAAE;IACpC,IAAIkC,QAAQ,GAAGX,QAAQ,CAACY,OAAO,CAACC,SAAS,CAAC,IAAI,CAAC;IAC/C,IAAIC,SAAS,GAAGH,QAAQ,CAACI,aAAa,CAAC,QAAQ,CAAC;IAEhD,IAAI9B,KAAK,CAACC,OAAO,CAACE,IAAI,CAACX,CAAC,CAAC,CAAC,EAAE;MAC1BqC,SAAS,CAACE,WAAW,MAAAC,MAAA,CAAMZ,UAAU,OAAAY,MAAA,CAAIX,WAAW,CAAE;MACtDA,WAAW,EAAE;IACf,CAAC,MAAM;MACLQ,SAAS,CAACE,WAAW,GAAG5B,IAAI,CAACX,CAAC,CAAC;IACjC;IAEA+B,aAAa,CAACE,WAAW,CAACC,QAAQ,CAAC;;IAEnC;IACA,IAAIO,UAAU,GAAGJ,SAAS,CAACK,WAAW;IACtC,IAAID,UAAU,GAAGX,QAAQ,EAAE;MACzBA,QAAQ,GAAGW,UAAU;IACvB;EACF;;EAEA;EACAtB,QAAQ,CAACa,IAAI,CAACW,WAAW,CAACZ,aAAa,CAAC;EAExC,OAAOD,QAAQ;AACjB;AAEA,SAASZ,YAAYA,CAACP,IAAI,EAAEiC,SAAS,EAAEhB,UAAU,EAAEC,WAAW,EAAEb,MAAM,EAAE;EACtE,IAAI6B,WAAW,GAAG7B,MAAM;EACxB;EACA,IAAIc,QAAQ,GAAGH,oBAAoB,CAAChB,IAAI,EAAEiB,UAAU,EAAEC,WAAW,CAAC;EAClE;EACAA,WAAW,GAAG,CAAC,CAAC,CAAC;EAAA,IAAAiB,KAAA,YAAAA,MAAA9C,CAAA,EACqB;IACpC,IAAI+C,IAAI,GAAGxB,QAAQ,CAACY,OAAO,CAACC,SAAS,CAAC,IAAI,CAAC;IAC3C,IAAIY,KAAK,GAAGD,IAAI,CAACT,aAAa,CAAC,QAAQ,CAAC;IACxC,IAAIW,MAAM,GAAGF,IAAI,CAACT,aAAa,CAAC,SAAS,CAAC;IAC1C,IAAIY,gBAAgB,GAAGH,IAAI,CAACT,aAAa,CAAC,oBAAoB,CAAC;IAE/D,IAAI9B,KAAK,CAACC,OAAO,CAACE,IAAI,CAACX,CAAC,CAAC,CAAC,EAAE;MAC1B;MACAgD,KAAK,CAACT,WAAW,MAAAC,MAAA,CAAMZ,UAAU,OAAAY,MAAA,CAAIX,WAAW,CAAE;MAClDoB,MAAM,CAACV,WAAW,GAAG,GAAG;MACxBU,MAAM,CAACE,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC;MAC9B;MACA,IAAMC,KAAK,GAAGC,SAAS,CAAC3C,IAAI,CAACX,CAAC,CAAC,EAAE6C,WAAW,CAAC,CAAC,CAAC;MAC/CI,MAAM,CAACM,KAAK,CAACF,KAAK,GAAGA,KAAK,CAACG,IAAI,CAAC,CAAC;MACjCP,MAAM,CAACM,KAAK,CAACE,eAAe,GAAGJ,KAAK,CAACK,UAAU,CAAC,CAAC;MACjDT,MAAM,CAACM,KAAK,CAACI,MAAM,gBAAAnB,MAAA,CAAgBa,KAAK,CAACM,MAAM,CAAE,CAAC,CAAC;;MAEnDV,MAAM,CAACW,gBAAgB,CAAC,OAAO,EAAE,YAAY;QAC3C,IAAIX,MAAM,CAACE,SAAS,CAACU,QAAQ,CAAC,QAAQ,CAAC,EAAE;UACvC;UACAZ,MAAM,CAACE,SAAS,CAACW,MAAM,CAAC,QAAQ,CAAC;UACjCb,MAAM,CAACE,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC;UACnCH,MAAM,CAACV,WAAW,GAAG,GAAG;UACxBS,KAAK,CAACO,KAAK,CAACF,KAAK,GAAG,OAAO;UAC3BL,KAAK,CAACO,KAAK,CAACQ,UAAU,GAAG,QAAQ;UACjCb,gBAAgB,CAACK,KAAK,CAACS,UAAU,MAAAxB,MAAA,CAAMV,QAAQ,GAAG,EAAE,OAAI,CAAC,CAAC;UAC1D;UACAmB,MAAM,CAACM,KAAK,CAACF,KAAK,GAAGA,KAAK,CAACY,QAAQ,CAAC,CAAC;UACrChB,MAAM,CAACM,KAAK,CAACE,eAAe,GAAGJ,KAAK,CAACa,cAAc,CAAC,CAAC;UACrDjB,MAAM,CAACM,KAAK,CAACI,MAAM,gBAAAnB,MAAA,CAAgBa,KAAK,CAACc,UAAU,CAAE,CAAC,CAAC;UACvD;UACAjD,YAAY,CACVP,IAAI,CAACX,CAAC,CAAC,EACPkD,gBAAgB,EAChBxB,YAAY,CAACA,YAAY,CAAC0C,OAAO,CAACxC,UAAU,CAAC,GAAG,CAAC,CAAC,EAClD,CAAC,EACDiB,WACF,CAAC;QACH,CAAC,MAAM;UACL;UACAI,MAAM,CAACE,SAAS,CAACW,MAAM,CAAC,aAAa,CAAC;UACtCb,MAAM,CAACE,SAAS,CAACC,GAAG,CAAC,QAAQ,CAAC;UAC9BJ,KAAK,CAACO,KAAK,CAACF,KAAK,GAAG,MAAM;UAC1BL,KAAK,CAACO,KAAK,CAACQ,UAAU,GAAG,MAAM;UAC/Bd,MAAM,CAACV,WAAW,GAAG,GAAG;UACxBW,gBAAgB,CAACzB,SAAS,GAAG,EAAE,CAAC,CAAC;UACjC;UACAwB,MAAM,CAACM,KAAK,CAACF,KAAK,GAAGA,KAAK,CAACG,IAAI,CAAC,CAAC;UACjCP,MAAM,CAACM,KAAK,CAACE,eAAe,GAAGJ,KAAK,CAACK,UAAU,CAAC,CAAC;UACjDT,MAAM,CAACM,KAAK,CAACI,MAAM,gBAAAnB,MAAA,CAAgBa,KAAK,CAACM,MAAM,CAAE,CAAC,CAAC;QACrD;MACF,CAAC,CAAC;MAEF9B,WAAW,EAAE,CAAC,CAAC;IACjB,CAAC,MAAM;MACLoB,MAAM,CAACE,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;MAClCJ,KAAK,CAACT,WAAW,GAAG5B,IAAI,CAACX,CAAC,CAAC;IAC7B;IAEA4C,SAAS,CAACX,WAAW,CAACc,IAAI,CAAC;EAC7B,CAAC;EA5DD,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,IAAI,CAACP,MAAM,EAAEJ,CAAC,EAAE;IAAA8C,KAAA,CAAA9C,CAAA;EAAA;AA6DtC;;AAEA;AACA,SAASsD,SAASA,CAACe,KAAK,EAAEC,UAAU,EAAE;EACpC;;EAEA,OAAO;IACLd,IAAI,EAAE,MAAM;IAAE;IACdS,QAAQ,EAAE,OAAO;IAAE;IACnBP,UAAU,EAAE,WAAW;IAAE;IACzBQ,cAAc,EAAE,UAAU;IAAE;IAC5BP,MAAM,EAAE,MAAM;IAAE;IAChBQ,UAAU,EAAE,OAAO,CAAE;EACvB,CAAC;AACH;AACA;AACApD,QAAQ,CAAC,GAAG,CAAC","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\n//function to generate random data in a treelike structure.\nfunction generateRandomData(iterations) {\n  let randomData = [];\n  randomData.push(treeGeneration(iterations));\n  return randomData;\n}\n//function to randomly populate a tree with miscellaneous data and sub-trees.\nfunction treeGeneration(iterations) {\n  const creaturePool = [\n    \"鬼\",\n    \"雪女\",\n    \"河童\",\n    \"天狗\",\n    \"狐\",\n    \"狸\",\n    \"ぬらりひょん\",\n    \"からかさ小僧\",\n    \"酒呑童子\",\n    \"座敷童子\",\n    \"一つ目小僧\",\n    \"絡新婦\",\n    \"口裂け女\",\n    \"人魚\",\n    \"魍魎\",\n    \"狐火\",\n    \"鵺\",\n    \"輪入道\",\n    \"牛鬼\",\n    \"天逆毎\",\n  ];\n  const adjPool = [\n    \"恐ろしい\",\n    \"不気味な\",\n    \"友好的な\",\n    \"幽玄な\",\n    \"奇怪な\",\n    \"邪悪な\",\n    \"神秘的な\",\n    \"怖い\",\n    \"魅惑的な\",\n    \"妖しい\",\n    \"呪われた\",\n    \"怪しい\",\n    \"凄まじい\",\n    \"霊的な\",\n    \"陰湿な\",\n    \"暗い\",\n    \"恐怖の\",\n    \"畏怖の\",\n    \"幻影的な\",\n    \"妖艶な\",\n  ];\n  let output = [];\n  for (let i = 0; i < iterations; i++) {\n    if (Math.random() > 0.5) {\n      if (i > 2) {\n        output.push(treeGeneration(Math.floor(i / 2)));\n      }\n    } else {\n      if (Math.random() > 0.5) {\n        output.push(\n          adjPool[Math.floor(Math.random() * adjPool.length)] +\n            creaturePool[Math.floor(Math.random() * creaturePool.length)]\n        );\n      } else {\n        output.push(Math.floor(Math.random() * 100));\n      }\n    }\n  }\n  return output;\n}\n//a function that checks if an element is an array, and if so, counts the total number of elements inside it, including nested arrays and the elements inside those nested arrays.\nfunction countElements(arr) {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      count += countElements(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n}\n\n//function to sort the tree data in a way that the tree is drawn in a more organized way.\n//sorts each array by arrays first, then strings, then numbers, then anything else.\n//arrays are sorted by the number of elements they contain, in descending order.\n//the strings are sorted by length.\n//the numbers are sorted in descending order (largest to smallest).\n//everything else is unsorted.\nfunction sortedData(data) {\n  data.sort((a, b) => {\n    if (Array.isArray(a) && !Array.isArray(b)) {\n      return -1;\n    } else if (!Array.isArray(a) && Array.isArray(b)) {\n      return 1;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n      return countElements(b) - countElements(a);\n    } else if (typeof a === \"string\" && typeof b !== \"string\") {\n      return -1;\n    } else if (typeof a !== \"string\" && typeof b === \"string\") {\n      return 1;\n    } else if (typeof a === \"string\" && typeof b === \"string\") {\n      return a.length - b.length;\n    } else if (typeof a === \"number\" && typeof b !== \"number\") {\n      return -1;\n    } else if (typeof a !== \"number\" && typeof b === \"number\") {\n      return 1;\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n      return b - a;\n    } else {\n      return 0;\n    }\n  });\n  for (let i = 0; i < data.length; i++) {\n    if (Array.isArray(data[i])) {\n      data[i] = sortedData(data[i]);\n    }\n  }\n  return data;\n}\n\n// Tree drawing main function.\nfunction drawTree(number) {\n  let data = generateRandomData(number);\n  data = sortedData(data); // Sort data\n  let totalElementsCount = countElements(data);\n  drawTreeHTML(\n    data,\n    document.getElementById(\"output\"),\n    \"α\",\n    1,\n    totalElementsCount\n  );\n  console.log(data);\n}\n\n// An HTML template element for a tree node, representing a clickable folder that can be expanded and collapsed.\nconst treeNode = document.createElement(\"template\");\ntreeNode.innerHTML = `\n  <div class=\"tree-node\" style=\"display: flex;\">\n    <div class=\"folder\" style=\"cursor: pointer; width: 20px;\"></div>\n    <div class=\"label\"></div>\n    <div class=\"subtree-container\" style=\"flex-grow: 1;\"></div>\n  </div>\n`;\n\n// Greek letter mapping for generations\nconst greekLetters = [\n  \"α\",\n  \"β\",\n  \"γ\",\n  \"δ\",\n  \"ε\",\n  \"ζ\",\n  \"η\",\n  \"θ\",\n  \"ι\",\n  \"κ\",\n  \"λ\",\n  \"μ\",\n  \"ν\",\n  \"ξ\",\n  \"ο\",\n  \"π\",\n  \"ρ\",\n  \"σ\",\n  \"τ\",\n  \"υ\",\n  \"φ\",\n  \"χ\",\n  \"ψ\",\n  \"ω\",\n];\n\n// Function to measure the width of the longest label\nfunction measureMaxLabelWidth(data, generation, folderCount) {\n  let maxWidth = 0;\n\n  // Create a temporary container for measuring\n  let tempContainer = document.createElement(\"div\");\n  document.body.appendChild(tempContainer);\n\n  // Measure widths of labels\n  for (let i = 0; i < data.length; i++) {\n    let tempNode = treeNode.content.cloneNode(true);\n    let tempLabel = tempNode.querySelector(\".label\");\n\n    if (Array.isArray(data[i])) {\n      tempLabel.textContent = `${generation} ${folderCount}`;\n      folderCount++;\n    } else {\n      tempLabel.textContent = data[i];\n    }\n\n    tempContainer.appendChild(tempNode);\n\n    // Update the maximum width if needed\n    let labelWidth = tempLabel.offsetWidth;\n    if (labelWidth > maxWidth) {\n      maxWidth = labelWidth;\n    }\n  }\n\n  // Clean up the temporary container\n  document.body.removeChild(tempContainer);\n\n  return maxWidth;\n}\n\nfunction drawTreeHTML(data, outputDiv, generation, folderCount, number) {\n  let inputNumber = number;\n  // Measure the maximum width of labels in the current folder\n  let maxWidth = measureMaxLabelWidth(data, generation, folderCount);\n  // Create the actual nodes\n  folderCount = 1; // Reset folder count after measuring\n  for (let i = 0; i < data.length; i++) {\n    let node = treeNode.content.cloneNode(true);\n    let label = node.querySelector(\".label\");\n    let folder = node.querySelector(\".folder\");\n    let subtreeContainer = node.querySelector(\".subtree-container\");\n\n    if (Array.isArray(data[i])) {\n      // Set the folder name using the Greek letter and count\n      label.textContent = `${generation} ${folderCount}`;\n      folder.textContent = \"▶\";\n      folder.classList.add(\"folder\");\n      // Set dynamic styles\n      const color = pickColor(data[i], inputNumber); // Assuming pickColor function is defined elsewhere\n      folder.style.color = color.text; // Set text color\n      folder.style.backgroundColor = color.background; // Set background color\n      folder.style.border = `1px solid ${color.border}`; // Set border color\n\n      folder.addEventListener(\"click\", function () {\n        if (folder.classList.contains(\"folder\")) {\n          // Handle opening the folder\n          folder.classList.remove(\"folder\");\n          folder.classList.add(\"open-folder\");\n          folder.textContent = \"▼\";\n          label.style.color = \"black\";\n          label.style.fontWeight = \"normal\";\n          subtreeContainer.style.marginLeft = `${maxWidth + 20}px`; // Set margin based on max width\n          //set dynamic styles\n          folder.style.color = color.openText; // Set text color\n          folder.style.backgroundColor = color.openBackground; // Set background color\n          folder.style.border = `1px solid ${color.openBorder}`; // Set border color\n          // Draw the subtree, even if it's empty\n          drawTreeHTML(\n            data[i],\n            subtreeContainer,\n            greekLetters[greekLetters.indexOf(generation) + 1],\n            1,\n            inputNumber\n          );\n        } else {\n          // Handle closing the folder\n          folder.classList.remove(\"open-folder\");\n          folder.classList.add(\"folder\");\n          label.style.color = \"blue\";\n          label.style.fontWeight = \"bold\";\n          folder.textContent = \"▶\";\n          subtreeContainer.innerHTML = \"\"; // Clear the subtree contents\n          // / Set dynamic styles\n          folder.style.color = color.text; // Set text color\n          folder.style.backgroundColor = color.background; // Set background color\n          folder.style.border = `1px solid ${color.border}`; // Set border color\n        }\n      });\n\n      folderCount++; // Increment the folder count for the next folder in the same generation\n    } else {\n      folder.classList.add(\"not-folder\");\n      label.textContent = data[i];\n    }\n\n    outputDiv.appendChild(node);\n  }\n}\n\n//later develop this to display colors based on the #of items in a folder relative to the total size of the tree.\nfunction pickColor(array, seedNumber) {\n  // Return an object with color properties based on the index or any other criteria\n\n  return {\n    text: \"blue\", // Example color for text\n    openText: \"white\", // Example color for text when folder is open\n    background: \"lightblue\", // Example color for background\n    openBackground: \"darkblue\", // Example color for background when folder is open\n    border: \"blue\", // Example color for border\n    openBorder: \"black\", // Example color for border when folder is open\n  };\n}\n//execute code. the number passed determines tree size.\ndrawTree(100);\n"]}